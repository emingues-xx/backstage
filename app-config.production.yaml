app:
  title: Ecommerce Veiculos
  baseUrl: ${APP_BASE_URL}

organization:
  name: Ecommerce Veiculos

backend:
  auth:
    externalAccess:
      - type: static
        options:
          token: ${BACKEND_SECRET}
          subject: external
        accessRestrictions:
          - plugin: events
  baseUrl: ${BACKEND_BASE_URL}
  cache:
    store: memory
  listen:
    port: ${PORT}
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: ${APP_BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  reading:
    allow:
      - host: github.com
      - host: raw.githubusercontent.com
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
      ssl: 
        rejectUnauthorized: false
        require: true
    # Configurações adicionais para produção
    pool:
      min: 1
      max: 5
      acquireTimeoutMillis: 30000
      createTimeoutMillis: 30000
      destroyTimeoutMillis: 5000
      idleTimeoutMillis: 30000
      reapIntervalMillis: 1000
      createRetryIntervalMillis: 200
    # Forçar migrações
    migrations:
      directory: 'migrations'
      tableName: 'migrations'

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

techdocs:
  builder: 'local'
  generator:
    runIn: 'local'
  publisher:
    type: 'local'

auth:
  providers:
    guest: {}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Usar apenas arquivos locais de exemplo
    - type: file
      target: examples/entities.yaml
      rules:
        - allow: [Component, System, API, Resource, Location]
    - type: file
      target: examples/org.yaml
      rules:
        - allow: [Group, User, Domain]

permission:
  enabled: true
